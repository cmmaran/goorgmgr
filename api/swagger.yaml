openapi: 3.0.3
info:
  title: Org Manager - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: http://localhost/api/v1
tags:
- name: employee
  description: Operations about Employee
paths:
  /employee:
    get:
      tags:
      - employee
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
                x-content-type: application/xml
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
    post:
      tags:
      - employee
      summary: Create employee
      description: This can only be done by the logged in user.
      operationId: createEmployee
      requestBody:
        description: Created employee object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
          application/xml:
            schema:
              $ref: '#/components/schemas/Employee'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Employee'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
            application/xml:
              schema:
                $ref: '#/components/schemas/Employee'
  /employee/createWithList:
    post:
      tags:
      - employee
      summary: Creates list of employees with given input array
      description: Creates list of employees with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Employee'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
            application/xml:
              schema:
                $ref: '#/components/schemas/Employee'
        default:
          description: successful operation
  /employee/{id}:
    get:
      tags:
      - employee
      summary: Get employee by employee ID
      description: ""
      operationId: getEmployeeByID
      parameters:
      - name: id
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
            application/xml:
              schema:
                $ref: '#/components/schemas/Employee'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
      - employee
      summary: Update employee
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: id
        in: path
        description: name that need to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        description: Update an existent employee.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
          application/xml:
            schema:
              $ref: '#/components/schemas/Employee'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Employee'
      responses:
        default:
          description: successful operation
    delete:
      tags:
      - employee
      summary: Delete employee
      description: Delete an existent employee.
      operationId: deleteEmployee
      parameters:
      - name: id
        in: path
        description: The employee ID that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "400":
          description: Invalid employee ID supplied
        "404":
          description: Employee not found
components:
  schemas:
    Employee:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: John
        position:
          type: string
          example: Senior Technical Lead
        salary:
          multipleOf: 0.01
          type: number
          description: User Status
          format: int32
          example: 2000.5
      example:
        name: John
        id: 10
        position: Senior Technical Lead
        salary: 2000.5
      xml:
        name: employee
